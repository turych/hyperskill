type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/MachineActions.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class MachineActions {
        private Scanner scanner;
        private Tank tank;

        public MachineActions(Scanner scanner, Tank tank) {
            this.scanner = scanner;
            this.tank = tank;
        }

        public void buy() {
            while (true) {
                System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");
                if (scanner.hasNextInt()) {
                    int type = scanner.nextInt();
                    Coffee coffee = CoffeeFactory.newInstance(type);
                    if (tank.haveCup(coffee)) {
                        tank.prepare(coffee);
                        System.out.println("I have enough resources, making you a coffee!");
                    } else {
                        System.out.println("Sorry, not enough water!");
                    }
                    return;
                } else {
                    String command = scanner.nextLine();
                    if (command.equals("back")) {
                        return;
                    } else {
                        System.out.println("Unknown command");
                    }
                }
            }
        }

        public void fill() {
            System.out.println("Write how many ml of water do you want to add:");
            tank.addWater(scanner.nextInt());

            System.out.println("Write how many ml of milk do you want to add:");
            tank.addMilk(scanner.nextInt());

            System.out.println("Write how many grams of coffee beans do you want to add:");
            tank.addBeans(scanner.nextInt());

            System.out.println("Write how many disposable cups of coffee do you want to add:");
            tank.addDisposableCups(scanner.nextInt());
        }

        public void takeMoney() {
            System.out.printf("I gave you $%d", tank.takeMoney());
        }

        public void displayStorage() {
            System.out.printf("The coffee machine has:\n" +
                            "%d of water\n" +
                            "%d of milk\n" +
                            "%d of coffee beans\n" +
                            "%d of disposable cups\n" +
                            "%d of money\n",
                    tank.getWater(), tank.getMilk(), tank.getBeans(), tank.getDisposableCups(), tank.getMoney());
        }
    }
  learner_created: true
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {

        private static Scanner scanner;

        private static Tank tank;

        public static void main(String[] args) {

            scanner = new Scanner(System.in);
            tank = new Tank(400, 540, 120, 9, 550);
            MachineActions actions = new MachineActions(scanner, tank);

            while (true) {
                System.out.println("Write action (buy, fill, take, remaining, exit):");
                String action = scanner.nextLine();

                switch (action) {
                    case "buy":
                        actions.buy();
                        break;
                    case "fill":
                        actions.fill();
                        break;
                    case "take":
                        actions.takeMoney();
                        break;
                    case "remaining":
                        actions.displayStorage();
                        break;
                    case "exit":
                        System.exit(0);
                    default:
                        System.out.println("Unknown command");
                }
            }

        }


    }
  learner_created: true
- name: src/machine/Tank.java
  visible: true
  text: |-
    package machine;

    public class Tank {
        private int water;
        private int milk;
        private int beans;
        private int disposableCups;
        private int money;

        public Tank(int water, int milk, int beans, int disposableCups, int money) {
            this.water = water;
            this.milk = milk;
            this.beans = beans;
            this.disposableCups = disposableCups;
            this.money = money;
        }

        public void addWater(int water) {
            this.water += water;
        }

        public void addMilk(int milk) {
            this.milk += milk;
        }

        public void addBeans(int beans) {
            this.beans += beans;
        }

        public void addDisposableCups(int disposableCups) {
            this.disposableCups += disposableCups;
        }

        public void addMoney(int money) {
            this.money += money;
        }

        public int getWater() {
            return water;
        }

        public int getMilk() {
            return milk;
        }

        public int getBeans() {
            return beans;
        }

        public int getDisposableCups() {
            return disposableCups;
        }

        public int getMoney() {
            return money;
        }

        public int takeMoney() {
            int _money = this.money;
            this.money = 0;
            return _money;
        }

        public boolean haveCup(Coffee coffee) {
            return disposableCups != 0
                    && water - coffee.water() >= 0
                    && milk - coffee.milk() >= 0
                    && beans - coffee.beans() >= 0;
        }

        public void prepare(Coffee coffee) {
            reduceTank(coffee);
            addMoney(coffee.cost());
        }

        private void reduceTank(Coffee coffee) {
            water -= coffee.water();
            milk -= coffee.milk();
            beans -= coffee.beans();
            disposableCups -= 1;
        }
    }
  learner_created: true
- name: src/machine/CoffeeFactory.java
  visible: true
  text: |
    package machine;

    public class CoffeeFactory {

        private static final int ESPRESSO = 1;
        private static final int LATTE = 2;
        private static final int CAPPUCCINO = 3;

        public static Coffee newInstance(int type) {
            switch (type) {
                case ESPRESSO:
                    return new Espresso();
                case LATTE:
                    return new Latte();
                case CAPPUCCINO:
                    return new Cappuccino();
                default:
                    return null;
            }
        }
    }
  learner_created: true
- name: src/machine/Action.java
  visible: true
  learner_created: true
- name: src/machine/drink/Drink.java
  visible: true
  text: |
    package machine;

    public interface Drink {
        int cost();
    }
  learner_created: true
- name: src/machine/drink/Espresso.java
  visible: true
  text: |
    package machine;

    public class Espresso implements Coffee{
        int water = 250;
        int milk = 0;
        int beans = 16;
        int cost = 4;

        @Override
        public int water() {
            return water;
        }

        @Override
        public int milk() {
            return milk;
        }

        @Override
        public int beans() {
            return beans;
        }

        @Override
        public int cost() {
            return cost;
        }
    }
  learner_created: true
- name: src/machine/drink/Latte.java
  visible: true
  text: |-
    package machine;

    public class Latte implements Coffee{
        int water = 350;
        int milk = 75;
        int beans = 20;
        int cost = 7;

        @Override
        public int water() {
            return water;
        }

        @Override
        public int milk() {
            return milk;
        }

        @Override
        public int beans() {
            return beans;
        }

        @Override
        public int cost() {
            return cost;
        }
    }
  learner_created: true
- name: src/machine/drink/Coffee.java
  visible: true
  text: |
    package machine;

    interface Coffee extends Drink{
        int water();
        int milk();
        int beans();
    }
  learner_created: true
- name: src/machine/drink/Cappuccino.java
  visible: true
  text: |-
    package machine;

    public class Cappuccino implements Coffee{
        int water = 200;
        int milk = 100;
        int beans = 12;
        int cost = 6;

        @Override
        public int water() {
            return water;
        }

        @Override
        public int milk() {
            return milk;
        }

        @Override
        public int beans() {
            return beans;
        }

        @Override
        public int cost() {
            return cost;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: -1
